FROM python:3.12-alpine AS builder

ARG APP_VERSION

USER root

RUN apk add --no-cache git curl bash \
  binutils build-base python3-dev libffi-dev openssl-dev py3-yaml sqlite sqlite-dev \
  gzip brotli

WORKDIR /install

ENV FLASK_ENV=production
ENV PYTHONOPTIMIZE=2

RUN git clone https://github.com/searxng/searxng.git . \
  && git checkout ${APP_VERSION} && rm -rf .git \
  && cp -p searx/version.py searx/version_frozen.py \
  && find searx/static/ -type f \( -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.svg" \) -exec gzip -9 -k {} + -exec brotli -9 -k {} + \
  && python3.12 -m pip install --no-cache-dir -r requirements.txt -r requirements-server.txt \
  && flags=$(grep -v '^\s*#' requirements.txt requirements-server.txt | sed 's/\[.*\]//' | sed -e 's/;.*//' -e 's/[<>=!].*$//' | awk '{print tolower($0)}' | xargs -I{} printf " --hidden-import={} --collect-all={}" ) \
  && python3.12 -m pip install --no-cache-dir pyinstaller && python3.12 -OO -m PyInstaller --strip --noupx $flags --hidden-import=isodate --collect-all=isodate searx/webapp.py \
  && cp -rp searx dist/webapp/_internal/

ENV PATH="${PATH}:/install/dist/webapp"

RUN mkdir -p /rt \
  && for bin in webapp curl; do \
      path="$(which "$bin")"; \
      cp -p --parents "$path" /rt; \
    done \
  && for bin in webapp sqlite3 curl; do \
      path="$(which "$bin")"; \
      ldd "$path" 2>/dev/null | awk '/=>/ {print $(NF-1)}' | grep '^/' | xargs -r -I{} cp -p --parents {} /rt; \
    done

FROM alpine

ARG USER=app
ENV UID=1000
ENV GID=1000

USER root

RUN apk add --no-cache curl bash

COPY --from=builder /rt/ /rt/
RUN for src in /rt/*; do \
      tgt="/${src#/rt/}"; \
      if [ -d "$src" ]; then \
        mkdir -p "$tgt"; \
        cp -ap "$src"/. "$tgt"/; \
      else \
        mkdir -p "$(dirname "$tgt")"; \
        cp -pn "$src" "$tgt"; \
      fi; \
    done \
  && rm -rf /rt \
  && rm -rf /install

RUN echo "${USER}:x:${UID}:" >> /etc/group \
  && echo "${USER}:x:${UID}:${GID}::/app:/bin/bash" >> /etc/passwd

ENV PATH="${PATH}:/usr/local/bin"
ENV LD_LIBRARY_PATH="/usr/local/lib:/usr/local/lib64:/usr/lib:/usr/lib64"
ENV FLASK_ENV=production
ENV PYTHONOPTIMIZE=2

ENV SEARXNG_SETTINGS_PATH="/etc/searxng/settings.yml"

WORKDIR /app
COPY --from=builder /install/dist/webapp /app
COPY --from=builder /install/searx/settings.yml /etc/searxng/
COPY --from=builder /install/searx/limiter.toml /etc/searxng/
COPY entrypoint.sh /app/

RUN chown -R "${UID}":"${GID}" /app \
  && chmod +x /app/entrypoint.sh

USER ${UID}

EXPOSE 8080

VOLUME /etc/searxng
VOLUME /var/cache/searxng

ENTRYPOINT ["/app/entrypoint.sh"]
