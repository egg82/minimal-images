FROM registry.access.redhat.com/ubi9 AS builder

ARG APP_VERSION
ARG TARGETARCH
ARG TARGETVARIANT

ARG EXPAT_VERSION=R_2_7_1
ARG GIFLIB_VERSION=5.1.4
ARG VIPS_VERSION=v8.17.1
ARG TF_VERSION=2.18.0

USER root

ENV PATH="${PATH}:/install/bin"
ENV LD_LIBRARY_PATH="/install/lib:/usr/local/lib:/usr/local/lib64"

RUN dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm \
    https://dl.fedoraproject.org/pub/epel/epel-next-release-latest-9.noarch.rpm \
  && crb enable \
  && dnf install -y https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-$(rpm -E %rhel).noarch.rpm \
    https://mirrors.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-$(rpm -E %rhel).noarch.rpm

RUN dnf install -y git xz curl-minimal cronie gzip tar bash \
    gcc gcc-c++ make cmake pkgconfig autoconf automake patch libtool glib2-devel \
    libxslt libxml2 \
    libjpeg-turbo-devel libpng-devel libtiff-devel libwebp-devel \
    fftw-devel libexif-devel libxml2-devel \
    libheif-devel libde265-devel perl-Image-ExifTool \
    python3 python3-pip \
  && dnf clean all \
  && rm -rf /var/cache/dnf \
  && python3 -m pip install --no-cache-dir meson ninja

WORKDIR /ffmpeg

RUN set -eux; \
  case "${TARGETARCH}/${TARGETVARIANT}" in \
    amd64/*) APP_ARCH="amd64" ;; \
    arm64/*) APP_ARCH="arm64" ;; \
    arm/v7) APP_ARCH="armhf" ;; \
    arm/v6) APP_ARCH="armel" ;; \
    386/*) APP_ARCH="i686" ;; \
    arm/*|arm) APP_ARCH="armhf" ;; \
    *) echo "Unsupported arch: ${TARGETARCH}/${TARGETVARIANT}" >&2; exit 1 ;; \
  esac; \
  curl -sSLO https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-${APP_ARCH}-static.tar.xz \
  && tar -xJf ffmpeg-release-${APP_ARCH}-static.tar.xz --strip-components=1 \
  && cp ffmpeg ffprobe /usr/local/bin/

WORKDIR /libexpat

RUN git clone https://github.com/libexpat/libexpat.git . \
  && git checkout ${EXPAT_VERSION} \
  && cd expat \
  && ./buildconf.sh \
  && ./configure \
  && make -j"$(nproc)" install

WORKDIR /giflib

RUN git clone https://git.code.sf.net/p/giflib/code . \
  && git checkout ${GIFLIB_VERSION} \
  && ./autogen.sh \
  && ./configure \
  && make -j"$(nproc)" install

WORKDIR /libvips

RUN git clone https://github.com/libvips/libvips.git . \
  && git checkout ${VIPS_VERSION} \
  && meson setup build \
  && ninja -C build \
  && ninja -C build install

WORKDIR /install

RUN set -eux; \
  case "${TARGETARCH}/${TARGETVARIANT}" in \
    amd64/*) APP_ARCH="amd64" ;; \
    arm64/*) APP_ARCH="arm64" ;; \
    *) echo "Unsupported arch: ${TARGETARCH}/${TARGETVARIANT}" >&2; exit 1 ;; \
  esac; \
  curl -sSLO https://github.com/photoprism/photoprism/releases/download/${APP_VERSION}/photoprism_${APP_VERSION}-linux-${APP_ARCH}.tar.gz \
  && tar -xzf photoprism_${APP_VERSION}-linux-${APP_ARCH}.tar.gz --strip-components=1 \
  && rm -f photoprism_${APP_VERSION}-linux-${APP_ARCH}.tar.gz

RUN set -eux; \
  case "${TARGETARCH}/${TARGETVARIANT}" in \
    amd64/*) APP_ARCH="x86_64" ;; \
    *) echo "Unsupported arch: ${TARGETARCH}/${TARGETVARIANT}" >&2; exit 1 ;; \
  esac; \
  rm -f lib/libtensorflow* \
  && curl -ssLO https://storage.googleapis.com/tensorflow/versions/${TF_VERSION}/libtensorflow-cpu-linux-${APP_ARCH}.tar.gz \
  && tar -xzf libtensorflow-cpu-linux-${APP_ARCH}.tar.gz lib \
  && rm -f libtensorflow-cpu-linux-${APP_ARCH}.tar.gz

RUN mkdir -p /rt \
  && for bin in photoprism ffmpeg ffprobe exiftool crond curl; do \
      path="$(which "$bin")"; \
      cp -p --parents "$path" /rt; \
    done \
  && for bin in photoprism ffmpeg ffprobe exiftool crond curl; do \
      path="$(which "$bin")"; \
      ldd "$path" 2>/dev/null | awk '/=>/ {print $(NF-1)}' | grep '^/' | xargs -r -I{} cp -p --parents {} /rt; \
    done

FROM registry.access.redhat.com/ubi9-minimal

ARG USER=app
ENV UID=1000
ENV GID=1000

USER root

RUN microdnf install -y cronie curl-minimal bash \
  && microdnf clean all \
  && rm -rf /var/cache/dnf

COPY --from=builder /rt/ /rt/
RUN for src in /rt/*; do \
      tgt="/${src#/rt/}"; \
      if [ -d "$src" ]; then \
        mkdir -p "$tgt"; \
        cp -apn "$src"/. "$tgt"/; \
      else \
        mkdir -p "$(dirname "$tgt")"; \
        cp -pn "$src" "$tgt"; \
      fi; \
    done \
  && rm -rf /rt \
  && rm -rf /install

RUN /usr/sbin/crond

RUN groupadd -g ${GID} ${USER} \
  && useradd -r -u ${UID} -g ${USER} -d /photoprism -s /bin/bash ${USER}

ENV LD_LIBRARY_PATH="/usr/local/lib:/usr/local/lib64"
ENV TF_CPP_MIN_LOG_LEVEL=1 TF_ENABLE_ONEDNN_OPTS=1

WORKDIR /photoprism
COPY --from=builder /install/assets /photoprism/assets
COPY --from=builder /install/bin/photoprism /photoprism
COPY --from=builder /install/lib /usr/local/lib
COPY entrypoint.sh /photoprism/

RUN chown -R "${UID}":"${GID}" /photoprism \
  && chmod +x /photoprism/entrypoint.sh

USER ${UID}

EXPOSE 2342 2343 2442 2443 9515 40000

VOLUME /photoprism/originals
VOLUME /photoprism/import
VOLUME /photoprism/storage

ENTRYPOINT ["/photoprism/entrypoint.sh"]
